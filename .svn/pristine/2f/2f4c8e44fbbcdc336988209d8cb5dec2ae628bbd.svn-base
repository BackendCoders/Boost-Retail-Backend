using Azure;
using Microsoft.EntityFrameworkCore;
using Serilog;
using SIM.Data;
using SIM.Data.Models.Catalog;
using SIM.Logic.Interface;
using System.Collections.Generic;

namespace SIM.Logic
{
    public class ProductLogic : IProductLogic
    {
        private readonly SimDbContext _db;
        private readonly ILogger _logger;

        public ProductLogic(SimDbContext db)
        {
            _db = db;
            _logger = Log.ForContext<ProductLogic>();
        }

        public async Task InsertProduct(Product obj)
        { 
            
        }

        public async Task<List<VatRate>> GetVatRates()
        {
            if (!await _db.VatRates.AnyAsync())
            {
                await _db.VatRates.AddAsync(new VatRate { Rate = 0 });
                await _db.VatRates.AddAsync(new VatRate { Rate = 5 });
                await _db.VatRates.AddAsync(new VatRate { Rate = 20 });

                await _db.SaveChangesAsync();
            }
            
            return await _db.VatRates.ToListAsync();
        }

        public async Task<List<Supplier>> GetSuppliers()
        {
            if (!await _db.Suppliers.AnyAsync())
            {
                await _db.Suppliers.AddAsync(new Supplier { Name = "Giant" });
                await _db.Suppliers.AddAsync(new Supplier { Name = "Trek" });
                await _db.Suppliers.AddAsync(new Supplier { Name = "Specialized" });
                await _db.Suppliers.AddAsync(new Supplier { Name = "Raleigh" });
                await _db.Suppliers.AddAsync(new Supplier { Name = "Whyte" });
                await _db.Suppliers.AddAsync(new Supplier { Name = "Madison" });
                await _db.Suppliers.AddAsync(new Supplier { Name = "Cube" });
                await _db.Suppliers.AddAsync(new Supplier { Name = "Sportline" });

                await _db.SaveChangesAsync();
            }
            
            return await _db.Suppliers.ToListAsync();
        }

        public async Task<List<Brand>> GetBrands(List<string> tocheck)
        {
            // Use a HashSet to store the names of the brand that already exist
            var existingBrands = await _db.Brands
                .Where(t => tocheck.Contains(t.Name))
                .ToListAsync();

            // Get the names of the existing tags
            var existingBrandNames = existingBrands.Select(t => t.Name).ToList();

            // Get the names that are not in the existing brand
            var newBrandNames = tocheck.Except(existingBrandNames).ToList();

            // Create new Brand entities for the new tag names
            var newBrands = newBrandNames.Select(name => new Brand { Name = name }).ToList();

            // Add the new Brand entities to the context
            await _db.Brands.AddRangeAsync(newBrands);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existingBrands.AddRange(newBrands);

            return existingBrands;
        }

        public async Task<List<Size>> GetSizes(List<string> tocheck)
        {
            // Use a HashSet to store the names of that already exist
            var existing = await _db.Sizes
                .Where(t => tocheck.Contains(t.Name))
                .ToListAsync();

            // Get the names of the existing 
            var existingNames = existing.Select(t => t.Name).ToList();

            // Get the names that are not in the existing 
            var newNames = tocheck.Except(existingNames).ToList();

            // Create new entities for the new tag names
            var newBrands = newNames.Select(name => new Size { Name = name }).ToList();

            // Add the new entities to the context
            await _db.Sizes.AddRangeAsync(newBrands);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existing.AddRange(newBrands);

            return existing;
        }

        public async Task<List<Colour>> GetColors(List<string> tocheck)
        {
            // Use a HashSet to store the names of that already exist
            var existing = await _db.Colours
                .Where(t => tocheck.Contains(t.Name))
                .ToListAsync();

            // Get the names of the existing 
            var existingNames = existing.Select(t => t.Name).ToList();

            // Get the names that are not in the existing 
            var newNames = tocheck.Except(existingNames).ToList();

            // Create new entities for the new tag names
            var newItems = newNames.Select(name => new Colour { Name = name }).ToList();

            // Add the new entities to the context
            await _db.Colours.AddRangeAsync(newItems);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existing.AddRange(newItems);

            return existing;
        }

        public async Task<List<Category>> GetCategorys(List<string> tocheck)
        {
            foreach (var cat in tocheck)
            {
                await ProcessStringCategory(cat);
            }


            // Use a HashSet to store the names of that already exist
            var existing = await _db.Categories
                .Where(t => tocheck.Contains(t.Name))
                .ToListAsync();

            // Get the names of the existing 
            var existingNames = existing.Select(t => t.Name).ToList();

            // Get the names that are not in the existing 
            var newNames = tocheck.Except(existingNames).ToList();

            // Create new entities for the new tag names
            var newItems = newNames.Select(name => new Category { Name = name }).ToList();

            // Add the new entities to the context
            await _db.Categories.AddRangeAsync(newItems);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existing.AddRange(newItems);

            return existing;
        }

        public async Task ProcessStringCategory(string fullCategory)
        {
            int cat1Id = 0;
            int cat2Id = 0;
            int cat3Id = 0;

            var cats = fullCategory.Split(',').ToList();

            var cat1 = new Category();
            cat1.Name = cats[0];

            await _db.Categories.AddAsync(cat1);
            await _db.SaveChangesAsync();

            if (cats.Count > 1)
            {
                var cat2 = new Category();
                cat2.Name = cats[1];
                cat2.ParentId = cat1.Id;
                
                await _db.Categories.AddAsync(cat2);
                await _db.SaveChangesAsync();

                cat2Id = cat2.Id;
            }

            if (cats.Count > 2)
            {
                var cat3 = new Category();
                cat3.Name = cats[2];
                cat3.ParentId = cat2Id;
                await _db.Categories.AddAsync(cat3);
                await _db.SaveChangesAsync();

                cat3Id = cat3.Id;
            }

            if (cats.Count > 3)
            {
                var cat4 = new Category();
                cat4.Name = cats[3];
                cat4.ParentId = cat3Id;

                await _db.Categories.AddAsync(cat4);
                await _db.SaveChangesAsync();
            }
        }


        public async Task<List<Specification>> GetSpecs(List<string> tocheck)
        {
            // Use a HashSet to store the names of that already exist
            var existing = await _db.Specifications
                .Where(t => tocheck.Contains(t.SpecificationJson))
                .ToListAsync();

            // Get the names of the existing 
            var existingNames = existing.Select(t => t.SpecificationJson).ToList();

            // Get the names that are not in the existing 
            var newNames = tocheck.Except(existingNames).ToList();

            // Create new entities for the new tag names
            var newItems = newNames.Select(name => new Specification { SpecificationJson = name }).ToList();

            // Add the new entities to the context
            await _db.Specifications.AddRangeAsync(newItems);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existing.AddRange(newItems);

            return existing;
        }

        public async Task<List<Geometry>> GetGeos(List<string> tocheck)
        {
            // Use a HashSet to store the names of that already exist
            var existing = await _db.Geometrys
                .Where(t => tocheck.Contains(t.GeometryJson))
                .ToListAsync();

            // Get the names of the existing 
            var existingNames = existing.Select(t => t.GeometryJson).ToList();

            // Get the names that are not in the existing 
            var newNames = tocheck.Except(existingNames).ToList();

            // Create new entities for the new tag names
            var newItems = newNames.Select(name => new Geometry { GeometryJson = name }).ToList();

            // Add the new entities to the context
            await _db.Geometrys.AddRangeAsync(newItems);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existing.AddRange(newItems);

            return existing;
        }

        public async Task<List<LongDescription>> GetLongDescriptions(List<string> tocheck)
        {
            // Use a HashSet to store the names of that already exist
            var existing = await _db.LongDescriptions
                .Where(t => tocheck.Contains(t.Description))
                .ToListAsync();

            // Get the names of the existing 
            var existingNames = existing.Select(t => t.Description).ToList();

            // Get the names that are not in the existing 
            var newNames = tocheck.Except(existingNames).ToList();

            // Create new entities for the new tag names
            var newItems = newNames.Select(name => new LongDescription { Description = name }).ToList();

            // Add the new entities to the context
            await _db.LongDescriptions.AddRangeAsync(newItems);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existing.AddRange(newItems);

            return existing;
        }

        public async Task<List<ShortDescription>> GetShortDescriptions(List<string> tocheck)
        {
            // Use a HashSet to store the names of that already exist
            var existing = await _db.ShortDescriptions
                .Where(t => tocheck.Contains(t.Description))
                .ToListAsync();

            // Get the names of the existing 
            var existingNames = existing.Select(t => t.Description).ToList();

            // Get the names that are not in the existing 
            var newNames = tocheck.Except(existingNames).ToList();

            // Create new entities for the new tag names
            var newItems = newNames.Select(name => new ShortDescription { Description = name }).ToList();

            // Add the new entities to the context
            await _db.ShortDescriptions.AddRangeAsync(newItems);

            // Save changes to the database asynchronously
            await _db.SaveChangesAsync();

            // merge both sets and return the data
            existing.AddRange(newItems);

            return existing;
        }
    }
}

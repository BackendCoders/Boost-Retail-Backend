@page "/UserMasterProductChoices"
<h3>User Product Choices</h3>

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject SIM.Data.SimDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider




@if (FilteredProducts?.Any() == true)
{
    <h4 class="mt-4">Filtered Products</h4>

    <table class="table table-bordered table-striped table-hover">
        <thead class="table-light">
            <tr>
                <th>Image</th>
                <th>MPN</th>
                <th>Title</th>
                <th>Brand</th>
                <th>Supplier</th>
                <th>Category 1</th>
                <th>Category 2</th>
                <th>Category 3</th>
                <th>Barcode</th>
                <th>Price</th>
                <th>Cost</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in FilteredProducts)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(product.Images))
                        {
                            var firstImage = product.Images.Split(',', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
                            if (!string.IsNullOrEmpty(firstImage))
                            {
                                <img src="@firstImage" alt="Product Image" style="max-height: 60px; max-width: 100px;" />
                            }
                        }
                    </td>
                    <td>@product.MPN</td>
                    <td>@product.Title</td>
                    <td>@product.Brand?.Name</td>
                    <td>@product.Supplier</td>
                    <td>@product.Category1?.Name</td>
                    <td>@product.Category2?.Name</td>
                    <td>@product.Category3?.Name</td>
                    <td>@product.Barcode</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@(product.Cost.HasValue ? product.Cost.Value.ToString("C") : "-")</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (FilteredProducts != null)
{
    <p class="text-muted mt-3">No products found for selected filters.</p>
}

@code {
    private bool _disbaled = false;
    private List<SIM.Data.Models.Catalog.MasterProduct> FilteredProducts = new();

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            await LoadFilteredProducts(userId);
        }
        await base.OnInitializedAsync();
    }

    private async Task LoadFilteredProducts(string userid)
    {
        var selected = await _db.UserSupplierProductCategoryBrands.Where(o=>o.UserId == userid).ToListAsync();

        // Load all products first
        var allProducts = await _db.MasterProducts
            .Include(p => p.Brand)
            .Include(p => p.Category1)
            .Include(p => p.Category2)
            .Include(p => p.Category3)
            .ToListAsync();

        // Now filter in memory
        FilteredProducts = allProducts
            .Where(p => selected.Any(sel =>
                p.Category2Id == sel.Category2Id &&
                p.Category3Id == sel.Category3Id &&
                p.BrandId == sel.BrandId
            ))
            .ToList();
    }

}

using EFCore.BulkExtensions;
using Microsoft.EntityFrameworkCore;
using Serilog;
using SIM.Data;
using SIM.Data.Models;
using SIM.Data.Models.Catalog;
using SIM.Suppliers.Cube;
using SIM.Suppliers.Giant;
using SIM.Suppliers.Madison;
using SIM.Suppliers.Raleigh;
using SIM.Suppliers.Sportline;
using SIM.Suppliers.Trek;
using SIM.Suppliers.Whyte;

namespace SIM.Logic
{
    public class ImportLogic : IImportLogic
    {
        private readonly GiantDataImportService _giant;
        private readonly TrekDataImportService _trek;
        private readonly CubeDataImportService _cube;
        private readonly WhyteDataImportService _whyte;
        private readonly MadisonDataImportService _madison;
        private readonly SportlineDataImportService _sportline;
        private readonly RaleighDataImportService _raleigh;
        private readonly SimDbContext _db;
        private readonly Serilog.ILogger _logger;

        public ImportLogic(
            SimDbContext context)
        {
            _db = context;
            _giant = new GiantDataImportService();
            _trek = new TrekDataImportService();
            _cube = new CubeDataImportService();
            _whyte = new WhyteDataImportService();
            _madison = new MadisonDataImportService();
            _sportline = new SportlineDataImportService();
            _raleigh = new RaleighDataImportService();

            _logger = Log.ForContext<ImportLogic>();
        }

        #region Giant
        public async Task<int> ImportGiant(GiantProductType type, int year)
        {
            var cnt = 0;

            if (type == GiantProductType.Both)
            {
                cnt = await InsertOrUpdateGiantBikes(year);
                cnt += await InsertOrUpdateGiantGear();
            }
            else if (type == GiantProductType.Bike)
            {
                cnt = await InsertOrUpdateGiantBikes(year);
            }
            else if (type == GiantProductType.Gear)
            {
                cnt = await InsertOrUpdateGiantGear();
            }

            await CreateRecord(DataSupplier.Giant, cnt);

            return cnt;
        }

        private async Task<int> InsertOrUpdateGiantBikes(int year)
        {
            var bikes = await _giant.GetBikesFromApi(year);

            _logger.Information("begin insert or update for bikes");
            await InsertOrUpdateBulk(bikes);
            _logger.Information("db insert/updates completed");

            return bikes.Count;
        }

        private async Task<int> InsertOrUpdateGiantGear()
        {
            var gear = await _giant.GetGearFromApi();

            // database
            _logger.Information("begin insert or update for gear");
            await InsertOrUpdateBulk(gear);
            _logger.Information("db insert/updates completed");

            return gear.Count;
        }
        #endregion

        #region Trek
        public async Task<int> ImportTrek(SupplierProductType type)
        {
            var cnt = 0;

            if (type == SupplierProductType.Both)
            {
                cnt = await InsertOrUpdateTrekBikes();
                cnt += await InsertOrUpdateTrekAccessories();
            }
            else if (type == SupplierProductType.Bike)
            {
                cnt = await InsertOrUpdateTrekBikes();
            }
            else if (type == SupplierProductType.Accessories)
            {
                cnt = await InsertOrUpdateTrekAccessories();
            }

            await CreateRecord(DataSupplier.Trek, cnt);

            return cnt;
        }

        private async Task<int> InsertOrUpdateTrekBikes()
        {
            var bikes = _trek.GetBikesFromApi();

            _logger.Information("begin insert or update trek bikes");
            await InsertOrUpdateBulk(bikes);
            _logger.Information("db insert/updates completed");

            return bikes.Count;
        }

        private async Task<int> InsertOrUpdateTrekAccessories()
        {
            var acces = _trek.GetAccessoriesFromApi();

            _logger.Information("begin insert or update trek accessories");
            await InsertOrUpdateBulk(acces);
            _logger.Information("db insert/updates completed");

            return acces.Count;
        }
        #endregion

        #region Cube
        public async Task<int> ImportCube(SupplierProductType type)
        {
            if (type == SupplierProductType.Bike)
            {
                var bikes = _cube.GetBikesFromFeed();

                _logger.Information("begin insert or update cube bikes");
                await InsertOrUpdateBulk(bikes);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Cube, bikes.Count);

                return bikes.Count;
            }
            else if (type == SupplierProductType.Accessories)
            {
                var pa = _cube.GetPartsAccessories();

                _logger.Information("begin insert or update cube bikes");
                await InsertOrUpdateBulk(pa);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Cube, pa.Count);

                return pa.Count;
            }
            else
            {
                var bikes = _cube.GetBikesFromFeed();

                _logger.Information("begin insert or update cube bikes");
                await InsertOrUpdateBulk(bikes);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Cube, bikes.Count);

                var pa = _cube.GetPartsAccessories();

                _logger.Information("begin insert or update cube bikes");
                await InsertOrUpdateBulk(pa);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Cube, pa.Count);

                return pa.Count + bikes.Count;
            }
            
        }
        #endregion

        #region Whyte
        public async Task<int> ImportWhyte()
        {
            var bikes = _whyte.GetBikesFromFeed();

            _logger.Information("begin insert or update whyte bikes");
            await InsertOrUpdateBulk(bikes);
            _logger.Information("db insert/updates completed");

            await CreateRecord(DataSupplier.Whyte, bikes.Count);

            return bikes.Count;
        }
        #endregion

        public async Task<int> ImportMadison()
        {
            var accessories = _madison.GetPartsAccessories();

            _logger.Information("begin insert or update madison p&a");
            await InsertOrUpdateBulk(accessories);
            _logger.Information("db insert/updates completed");

            await CreateRecord(DataSupplier.Madison, accessories.Count);

            return accessories.Count;
        }

        public async Task<int> ImportSportline()
        {
            var bikes = _sportline.GetBikes();

            _logger.Information("begin insert or update sportline bikes");
            await InsertOrUpdateBulk(bikes);
            _logger.Information("db insert/updates completed");

            await CreateRecord(DataSupplier.Sportline, bikes.Count);

            return bikes.Count;
        }

        public async Task<int> ImportRaleigh(SupplierProductType type)
        {
            if (type == SupplierProductType.Bike)
            {
                var bikes = _raleigh.GetBikes();

                _logger.Information("begin insert or update raleigh bikes");
                await InsertOrUpdateBulk(bikes);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Raleigh, bikes.Count);

                return bikes.Count;
            }
            else if (type == SupplierProductType.Accessories)
            {
                var parts = _raleigh.GetParts();

                _logger.Information("begin insert or update raleigh parts");
                await InsertOrUpdateBulk(parts);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Raleigh, parts.Count);

                return parts.Count;
            }
            else
            {
                var bikes = _raleigh.GetBikes();

                _logger.Information("begin insert or update raleigh bikes");
                await InsertOrUpdateBulk(bikes);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Raleigh, bikes.Count);

                var parts = _raleigh.GetParts();

                _logger.Information("begin insert or update raleigh parts");
                await InsertOrUpdateBulk(parts);
                _logger.Information("db insert/updates completed");

                await CreateRecord(DataSupplier.Raleigh, parts.Count);

                return parts.Count + bikes.Count;
            }
        }

        public async Task InsertOrUpdateBulk(List<CatalogueItem> items)
        {
            await _db.BulkInsertOrUpdateAsync(items);
        }

        public async Task CreateRecord(DataSupplier supplier, int productCount)
        {
            await _db.SupplierImportHistories.AddAsync(new SupplierImportHistory { Supplier = supplier, SupplierName = supplier.ToString(), ProductCount = productCount, ImportedOn = DateTime.Now });
            await _db.SaveChangesAsync();
        }

        public async Task<List<SupplierImportHistory>> GetHistory(DataSupplier supplier)
        {
            return await _db.SupplierImportHistories.Where(o => o.Supplier == supplier).ToListAsync();
        }

        public async Task<SupplierImportHistory> GetLastImportRecord(DataSupplier supplier)
        {
            return await _db.SupplierImportHistories.Where(o => o.Supplier == supplier).FirstOrDefaultAsync();
        }
    }
}

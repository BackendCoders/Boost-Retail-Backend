using Microsoft.AspNetCore.Mvc;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;
using Serilog;
using SIM.Data;
using SIM.Data.Models;
using SIM.Data.Models.Catalog;
using SIM.DTOs;
using SIM.Logic;
using SIM.Logic.Interface;

namespace SIM.Actions
{
    public class CatalogueToProductActions : ICatalogueToProductActions
    {
        private readonly ILogger _logger;
        private readonly ICatalogueLogic _catalogueLogic;
        private readonly IProductLogic _productLogic;

        public CatalogueToProductActions(ICatalogueLogic logic, IProductLogic logic2)
        {
            _catalogueLogic = logic;
            _productLogic = logic2;
            _logger = Log.ForContext<CatalogueToProductActions>();
        }

        public async Task<ActionResult> Exists(string mpn)
        {
            try
            {
                //return OkResult(); if no return object
                return new OkObjectResult(await _catalogueLogic.Exists(mpn));
            }
            catch (Exception ex)
            {
                return new ObjectResult(ex.Message)
                {
                    StatusCode = 500
                };
            }
        }

        public async Task ProcessItems(List<ProductDto> items, DataSupplier supplier)
        {
            _logger.Information("begin filling foreign tables");

            // VAT RATES
            var vatList = await _productLogic.GetVatRates();

            // SUPPLIERS
            var supplierList = await _productLogic.GetSuppliers();

            // BRAND
            var brands = items.Select(x => x.Brand).Distinct().ToList();
            var brandList = await _productLogic.GetBrands(brands);

            // COLOURS
            var colors = items.Select(x => x.Colour).Distinct().ToList();
            var colorList = await _productLogic.GetColors(colors);

            // SIZES
            var sizes = items.Select(x => x.Size).Distinct().ToList();
            var sizeList = await _productLogic.GetSizes(sizes);

            // GEOMETRY
            var geo = items.Select(x => x.GeometryJson).Distinct().ToList();
            var geoList = await _productLogic.GetGeos(geo);

            // SPECIFICATIONS
            var spec = items.Select(x => x.SpecificationsJson).Distinct().ToList();
            var specList = await _productLogic.GetSpecs(spec);

            // LONG DESCRIPTIONS
            var longDesc = items.Select(x => x.LongDescription).Distinct().ToList();
            var longDescList = await _productLogic.GetLongDescriptions(longDesc);

            // SHORT DESCRIPTIONS
            var shortDesc = items.Select(x => x.ShortDescription).Distinct().ToList();
            var shortDescList = await _productLogic.GetShortDescriptions(shortDesc);

            var newList = new List<Product>();

            foreach ( var item in items)
            {
                if(item.VatRate == null)
                    item.VatRate = 0;

                var nobj = new Product();

                nobj.MPN = item.MPN;
                nobj.Barcode = item.Barcode;
                nobj.BoxQty = item.BoxQty;
                nobj.Price = item.Price;
                nobj.GenderOrAge = item.GenderOrAge;
                nobj.Cost = item.Cost;
                nobj.GroupName = item.GroupName;
                nobj.Images = item.Images;
                nobj.ProductType = item.ProductType;
                nobj.Status = ProductStatus.Deferred;
                nobj.SupplierDetailsUrl = item.SupplierDetailsUrl;
                nobj.Title = item.ProductTitle;
                nobj.VideoUrl = item.VideoUrl;
                nobj.Weight = item.Weight;
                nobj.Year = item.Year;

                nobj.SupplierId = supplierList.First(o => o.Name == "Trek").Id;
                nobj.BrandId = brandList.First(o => o.Name == item.Brand).Id;
                nobj.ColourId = colorList.First(o => o.Name == item.Colour).Id;
                nobj.SizeId = sizeList.First(o => o.Name == item.Size).Id;
                nobj.VatRateId = vatList.First(o => o.Rate == (decimal)item.VatRate).Id;
                nobj.LongDescId = longDescList.First(o => o.Description == item.LongDescription).Id;
                nobj.ShortDescId = shortDescList.First(o => o.Description == item.ShortDescription).Id;
                nobj.GeoId = geoList.First(o => o.GeometryJson == item.GeometryJson).Id;
                nobj.SpecId = specList.First(o => o.SpecificationJson == item.SpecificationsJson).Id;

                newList.Add(nobj);
            }

            // assign our categories
            await AssignBikeCategories(newList, supplier);

            // save the list
            foreach (var product in newList)
            {
                await _productLogic.Save(product);
            }
        }

        private async Task AssignBikeCategories(List<Product> products, DataSupplier supplier)
        {
            string[] data = null;
            switch (supplier)
            {
                case DataSupplier.Giant:
                    data = File.ReadAllLines("Data\\Maps\\GIANT_BIKES_MODELS_LOOKUP_TABLE.csv")
                        .Concat(File.ReadAllLines("Data\\Maps\\LIV_BIKES_MODELS_LOOKUP_TABLE.csv"))
                        .ToArray();
                    break;
                case DataSupplier.Trek:
                    data = File.ReadAllLines("Data\\Maps\\TREK_BIKES_MODELS_LOOKUP_TABLE.csv");
                    break;
                case DataSupplier.Specialized:
                    break;
                case DataSupplier.Raleigh:
                    break;
                case DataSupplier.Whyte:
                    break;
                case DataSupplier.Madison:
                    break;
                case DataSupplier.Cube:
                    break;
                case DataSupplier.Sportline:
                    break;
                default:
                    break;
            }
            

            var withBikes = new Dictionary<string,string>();
            var withEBikes = new Dictionary<string,string>();
            for (int i = 1; i < data.Length; i++)
            {
                var line = data[i].Trim();

                var a = line.Contains("Electric Bike");

                if (!a)
                {
                    withBikes.Add(line.Split(',')[1],line);
                }
                else
                {
                    withEBikes.Add(line.Split(',')[1],line);
                }
            }

            var final = new List<Product>();

            foreach (var model in withBikes)
            {
                var bikes = products.Where(o => o.Title.Contains(model.Key) && o.ProductType == ProductType.Bike).ToList();

                if (bikes.Count != 0)
                {
                    await Assign(bikes, model.Value);
                    final.AddRange(bikes);
                }
                
            }

            foreach (var model in withEBikes)
            {
                var ebikes = products.Where(o => o.Title.Contains(model.Key) && o.ProductType == ProductType.EBike).ToList();

                if (ebikes.Count != 0)
                {
                    await Assign(ebikes, model.Value);
                    final.AddRange(ebikes);
                }
            }

            var notfound = products.Where(o => !final.Select(x => x.MPN).Contains(o.MPN)).ToList();

            if (notfound.Count > 0)
            {
                var mlist = notfound.Select(x => x.Title).Distinct().ToList();
                //throw new Exception("Not all products were mapped");
                File.WriteAllLines(@"NOT_FOUND_PRODUCTS.csv", mlist);
            }
        }

        private async Task Assign(List<Product> products, string categorys)
        {
            var a = categorys.Split(',')[2];
            var b = categorys.Split(',')[3];
            var c = categorys.Split(',')[4];

            var cataid = await _productLogic.GetCategory(a);
            var catbid = await _productLogic.GetCategory(b);
            var catcid = await _productLogic.GetCategory(c);

            foreach (var product in products)
            {
                product.Category1Id = cataid.Id;
                product.Category2Id = catbid.Id;
                product.Category3Id = catcid.Id;
            }
        }
    }
}
